# import UserOrderByInput, PostOrderByInput, CommentOrderByInput from './generated/prisma.graphql'
type Query{
    myPosts(query: String, first: Int, skip: Int, after: String, orderBy: PostOrderByInput):[Post!]!
    posts(query: String,first: Int, skip: Int, after: String, orderBy: PostOrderByInput): [Post!]!
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput) : [User!]!
    comments(, first: Int, skip: Int, after: String, orderBy: CommentOrderByInput):[Comment!]!
    me: User!
    post(id: ID!): Post!
    
}

type Mutation{
    login(data: LoginUserInput!): AuthPayLoad!
    createUser(data: CreateUserInput!): AuthPayLoad!
    deleteUser: User!
    updateUser(data: UpdateUserInput!): User!
    createPost(data: CreatePostInput!): Post!
    deletePost(id: ID!): Post!
    updatePost(id: ID!, data: UpdatePostInput!): Post!
    createComment(data: CreateCommentInput!): Comment!
    deleteComment(id: ID!): Comment!
    updateComment(id: ID! data: UpdateCommentInput!): Comment!
}

type Subscription{
    comment(postId: ID!): CommentSubscriptionPayload!
    post: PostSubscriptionPayload!
    myPost: PostSubscriptionPayload!
}

type AuthPayLoad{
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    
}

input UpdateUserInput{
    name: String
    email: String
    password: String
    
}

input CreatePostInput{
    title: String!
    body: String!
    published: Boolean!
}

input UpdatePostInput{
    title: String
    body: String
    published: Boolean
}

input CreateCommentInput{
    text: String!
    post: ID!
}

input UpdateCommentInput{
    text: String
    
}

input LoginUserInput{
    email: String!
    password: String!
}
type User{
    id: ID!
    name: String!
    email: String
    posts: [Post!]!
    password: String!
    comments: [Comment!]!
    updatedAt: String!
    createdAt: String!
}

type Post{
    id: ID!
    title: String!
    body: String!
    published: Boolean!
    author: User!
    comments: [Comment!]
    updatedAt: String!
    createdAt: String!
}
type Comment{
    id: ID!
    text: String!
    author: User!
    post: Post! 
    updatedAt: String!
    createdAt: String!
}

enum MutationType{
    CREATED
    UPDATED
    DELETED
}

type PostSubscriptionPayload {
    mutation: MutationType!
    node: Post
}

type CommentSubscriptionPayload {
    mutation: MutationType!
    node: Comment
}
